# shortcuts for commonly used options
alias eval evaluate
alias bench benchmark
alias -d --debugLevel 1
alias -f --useFastModelParser 1
alias -i --evaluationTrialsPerEpoch
alias -l --lowerBoundRepresentation
alias -o --policyOutputFile
alias -p --terminateRegretBound
alias -s --searchStrategy
alias -t --terminateWallclockSeconds
alias -u --upperBoundRepresentation

# command: The command to run: 'solve', 'benchmark', or 'evaluate'.
# Normally, this is set by the first command-line argument, not
# counting flags.  Thus you can write 'solve' instead of '--command solve'.
command none

# simulatorModel: The problem model to use in simulation when evaluating
# a policy.  By default, the same model is passed to the planner, but
# you can give a different model to the planner using the plannerModel
# config field.  Normally, this is set by the second command-line argument,
# not counting flags. Thus you can write 'my.pomdp' instead of
# '--simulatorModel my.pomdp'.
simulatorModel none

# searchStrategy: Specifies search strategy.  Valid choices are
# 'frtdp', 'hsvi', 'rtdp', 'lrtdp', 'hdp', and 'script'.  ('script'
# reads a fixed sequence of states to back up from input files;
# see the 'backupScriptInputDir' parameter below.)
searchStrategy frtdp

# modelType: Specifies the type of planning model.  Valid choices are
# '-', 'pomdp', 'mdp', 'racetrack', and 'custom'.  '-' tells ZMDP to
# infer the model type from its filename extension. 'pomdp' means the
# model is in Tony Cassandra's POMDP file format.  'mdp' means the model
# is in Cassandra's MDP file format (a variant of the POMDP format in
# which observations are not specified).  'racetrack' means the model is
# from the racetrack MDP domain.  'custom' tells ZMDP to use the
# user-defined model you implement by editing src/mdps/CustomMDP.cc.
modelType -

# lowerBoundRepresentation: Specifies how to represent the lower bound
# on the optimal value function.  Valid choices are '-', 'point', and
# 'maxPlanes'. '-' tells ZMDP to use the default representation for the
# given model type ('point' for MDP problems and 'maxPlanes' for POMDP
# problems).
lowerBoundRepresentation -

# upperBoundRepresentation: Specifies how to represent the upper bound
# on the optimal value function.  Valid choices are '-', 'point', and
# 'sawtooth'. '-' tells ZMDP to use the default representation for the
# given model type ('point' for MDP problems and 'sawtooth' for POMDP
# problems).
upperBoundRepresentation -

# maintainLowerBound: Specify '-', 0, or 1.  If 1, maintain a lower
# bound on the optimal value function during search.  If '-', maintain
# the lower bound only if it is required for the given search algorithm
# (it is required for 'frtdp' and 'hsvi').
maintainLowerBound -

# maintainUpperBound: Specify 0 or 1.  If 1, maintain an upper bound
# on the optimal value function during search.  All the search strategies
# except 'script' require maintainUpperBound=1.
maintainUpperBound 1

# policyOutputFile: Specifies where to write the output policy.  ZMDP
# outputs the current policy at the following times: (1) at each
# evaluation epoch [when using zmdp benchmark], and (2) whenever the run
# terminates for any reason (target regret bound reached, timeout, or
# ctrl-C user interrupt).  Note that policies can currently only be
# output if modelType='pomdp' and lowerBoundRepresentation='maxPlanes'.
# '-' tells ZMDP to write the policy to 'out.policy' if the zmdp solve
# front-end is used and disable policy output otherwise.  'none' tells
# ZMDP to disable policy output.
policyOutputFile -

# useFastModelParser: Specify 0 or 1.  If value is 0, Tony Cassandra's
# canonical parser is used to parse POMDPs.  If value is 1, ZMDP's
# built-in POMDP parser is used.  ZMDP's parser is much faster for large
# problems but does not support all the constructs in Cassandra's POMDP
# specification language (for instance, states must be identified
# numerically rather than with string identifiers).  Most POMDPs in
# Cassandra's POMDP repository are not compatible with the fast parser
# as-is, but could be translated to the language subset it understands.
# See the RockSample problems for a compatible example.
useFastModelParser 0

# terminateRegretBound: If set to a positive value, the solution
# algorithm will terminate when the regret of the current policy with
# respect to the optimal policy is bounded to the specified value.
# NOTE: This may not work as expected if only one-sided bounds are
# maintained, since the usual way ZMDP bounds regret is to calculate
# upperBound(b0) - lowerBound(b0).
terminateRegretBound 1e-3

# terminateLowerBoundValue: If set to a value other than -999, the
# solution algorithm will terminate when lowerBound(b0) >=
# terminateLowerBoundValue.
# [zmdp benchmark only]
terminateLowerBoundValue -999

# terminateUpperBoundValue: If set to a value other than -999, the
# solution algorithm will terminate when upperBound(b0) <=
# terminateUpperBoundValue.
# [zmdp benchmark only]
terminateUpperBoundValue -999

# terminateWallclockSeconds: If set to a positive value, the solution
# algorithm will terminate after running for the specified amount of
# wallclock time.  The termination check excludes time spent outside the
# solution algorithm, e.g. reading model files and evaluating policies
# for benchmark purposes.  Also note that the termination check is only
# performed at the end of trials, so the reported final wallclock time
# will usually exceed the specified termination condition.
terminateWallclockSeconds -1

# terminateNumBackups (integer): If set to a positive value, terminate
# after the specified number of backups have been performed by the
# heuristic search algorithm.  Note that the termination check is only
# performed at the end of trials, so the reported final number of backups
# will usually exceed the specified termination condition.
terminateNumBackups -1

# debugLevel (integer): At higher debug levels ZMDP will output more
# verbose debugging messages.  Currently, only level 0 (normal level)
# and level 1 (extra debugging) are useful.
debugLevel 0

# maxHorizon (integer): If set to a positive value, informs ZMDP that
# the system is guaranteed to enter a zero-reward absorbing state after
# at most the specified number of time steps.  This hint is used to
# calculate tighter initial bounds (currently only used for POMDP
# problems).  Note: If the problem is an undiscounted POMDP, you must
# specify a maxHorizon value.
maxHorizon -1

# useWeakUpperBoundHeuristic: Specify 0 or 1.  If 1, avoid spending time
# generating a good upper bound heuristic.  This only applies to some
# problems and interpretation depends on the problem; e.g., sets h_U = 0
# for racetrack.
useWeakUpperBoundHeuristic 0

# runTimeActionSelection: Specify '-', 'upper', or 'lower'.  Run-time
# (i.e., evaluation epoch time) action selection uses one-step lookahead
# with either the upper or lower bound based on what you specify.  '-'
# tells ZMDP to use the lower bound if it is available and fall back to
# the upper bound otherwise.
runTimeActionSelection -

# evaluationTrialsPerEpoch: Specifies the number of simulation trials to
# run at each policy evaluation epoch.  The reported policy quality for
# the epoch is the mean reward achieved over the set of trials.
# [does not apply to zmdp solve]
evaluationTrialsPerEpoch 1000

# evaluationMaxStepsPerTrial: If set to a positive value, specifies the
# maximum number of time steps to run each simulation trial when
# evaluating policy quality.  Note that ZMDP will automatically terminate
# a trial if the system enters a zero-reward absorbing state, so if
# your model guarantees this will happen in finite time you may find you
# don't need to set this parameter.
# [does not apply to zmdp solve]
evaluationMaxStepsPerTrial 251

# evaluationFirstEpochWallclockSeconds: Specifies the amount of
# wallclock time to run the solution algorithm for before the first
# policy evaluation epoch.  Note: because the benchmark driver can only
# run evaluation epochs when the solution algorithm yields control, the
# actual epoch timing is not guaranteed to match what you specify.  The
# timing guarantees are that (1) the evaluation epoch will start *after*
# the time you specify, and (2) the actual elapsed wallclock time will
# be accurately logged in the benchmark output used for plotting.
# [zmdp benchmark only]
evaluationFirstEpochWallclockSeconds 1.0

# evaluationEpochsPerMagnitude: Evaluation epoch timing is spaced
# logarithmically according to elapsed wallclock time.  This parameter
# specifies the number of epochs per order of magnitude in a log plot.
# For instance, if 3 is specified, there will be three epochs between 10
# and 100 seconds elapsed, three between 100 and 1000 seconds elapsed,
# etc.
# [zmdp benchmark only]
evaluationEpochsPerMagnitude 10

# useEvaluationCache: If 1, use fancy techniques to speed up policy
# evaluation.  Techniques could include caching the policy and
# reweighting trajectories to reduce variance.
# [zmdp benchmark only]
useEvaluationCache 1

# evaluationOutputFile: Specifies where to write results from policy
# evaluation.  The resulting file has one line per epoch.
# [zmdp benchmark only]
evaluationOutputFile inc.plot

# boundsOutputFile: Specifies where to write data on bounds at the
# initial state. The resulting file has one line per top-level
# trial of the search algorithm.
# [zmdp benchmark only]
boundsOutputFile bounds.plot

# simulationTraceOutputFile: Specifies where to write logs of simulator
# state/belief, actions selected, etc. during policy evaluation.  The
# resulting file has two lines per time step of simulation.
# [does not apply to zmdp solve]
simulationTraceOutputFile sim.plot

# simulationTracesToLogPerEpoch (integer): If set to a non-negative
# value, specifies the number of simulation traces to log at each
# evaluation epoch.  If set to a negative value, all traces are logged
# (note: this can lead to very large log files!).
# [does not apply to zmdp solve]
simulationTracesToLogPerEpoch 1

# scoresOutputFile: Specifies where to write a log of the rewards achieved
# in all simulation trials.  Each line in the log represents the total
# (discounted) reward achieved in a single simulation trial.
# [zmdp evaluate only]
scoresOutputFile scores.plot

# useTimeWithoutHeuristic: Specify 0 or 1.  If 1, the wallclock times
# reported in zmdp benchmark performance logs will *not* include the time
# taken to generate initial bounds.  Instead, they will only include
# time spent in heuristic search trials.  This option allows you to
# eliminate one confounding factor in the timing when comparing
# different algorithms with the same initialization procedure.  Of
# course, you should not turn it on when comparing algorithms that use
# different initialization procedures.
useTimeWithoutHeuristic 1

# useMaxPlanesMasking: Specify 0 or 1.  If 1, try to compress the
# maxPlanes lower bound representation by maintaining 'masked' alpha
# vectors.  When an alpha vector is calculated by a backup at a specific
# belief, ZMDP will retain only the entries of the alpha vector that
# correspond to non-zero entries of the belief.  The resulting alpha
# vector is not as widely useful, since it only applies to a submanifold
# of the belief simplex.  However, masking can provide massive
# advantages on sparse problems where masked alpha vectors are much
# easier to generate and consume much less memory.
useMaxPlanesMasking 1

# useMaxPlanesSupportList: Specify 0 or 1.  useMaxPlanesSupportList=1
# requires useMaxPlanesMasking=1.  If 1, try to speed up maxPlanes value
# function queries by keeping a list of alpha vectors that 'support'
# each state in the sense that the state is part of the alpha vector's
# mask.  When the value for a belief is queried, the algorithm can restrict
# its consideration of planes to the support list for one of the non-zero
# entries of the belief, rather than considering all planes.
useMaxPlanesSupportList 1

# useMaxPlanesCache: Specify 0 or 1.  If 1, enables a set of
# caching-related speedups in the maxPlanes lower bound.  A mapping from
# search graph nodes to most recent dominant planes is maintained, along
# with 'age' information about when nodes were updated and when planes
# were created.  This speeds up value function queries.
useMaxPlanesCache 1

# useMaxPlanesExtraPruning: Specify 0 or 1. useMaxPlanesExtraPruning=1
# requires useMaxPlanesCache=1.  If 1, enables more aggressive pruning
# that deletes alpha vectors which are known not to be dominant at any
# belief that has been queried so far in the run.  If 0, only alpha
# vectors that are pointwise dominated (i.e., dominated by a single other
# alpha vector throughout the belief simplex) will be pruned.
useMaxPlanesExtraPruning 1

# useSawtoothSupportList: Specify 0 or 1.  If 1, try to speed up
# sawtooth value function queries by keeping a list of upper bound
# belief points that 'support' each state in the sense that the belief's
# entry for the state is non-zero.  When the value for a belief is
# queried, the algorithm restricts its consideration of planes to the
# support list for one of the non-zero entries of the belief, rather
# than considering all planes.  To relate this to the maxPlanes
# parameters, turning on useSawtoothSupportList=1 is similar to to
# turning on useMaxPlanesMasking=1 and useMaxPlanesSupportList=1.  For
# the sawtooth representation, turning on masking without support lists
# doesn't make much sense; thus we don't provide a separate masking
# parameter.
useSawtoothSupportList 1

# useLogBackups: Specify 0 or 1.  If 1, generate the logs specified
# by the stateIndexOutputFile and backupsOutputFile parameters.
# [zmdp benchmark only]
useLogBackups 0

# stateIndexOutputFile: Specifies where to write an index of states (or
# POMDP beliefs) that are referenced in other log files.  The index
# file provides a unique numeric identifier for every state of interest.
# [zmdp benchmark only]
stateIndexOutputFile stateIndex.log

# backupsOutputFile: Specifies where to write a log of state (or POMDP
# belief) backups.  The log is in chronological order and contains one
# line per backup made.  The line lists the index number (from the
# stateIndexOutputFile) for the backed up state.
# [zmdp benchmark only]
backupsOutputFile backups.log

# backupScriptInputDir: If searchStrategy='script', ZMDP will read a
# sequence of states to back up from the given directory.  Specifically,
# ZMDP tries to read the sequence from files in the directory with the
# names given in the 'stateIndexOutputFile' and 'backupsOutputFile'
# parameters.  This allows you to repeat the exact sequence of updates
# from an earlier run, even if you are using different parameters that
# would normally affect which states are updated (e.g. a different value
# function representation).
# [zmdp benchmark only]
backupScriptInputDir none

# boundValuesOutputFile: Specifies where to write a list of state
# (or POMDP belief) bound values.  The list is written if either
# searchStrategy='script' or useLogBackups=1.  It includes lower and
# upper bound values for the states in the index file.
boundValuesOutputFile boundValues.log

# qValuesOutputFile: If set to a value other than 'none', ZMDP will
# write a list of bounds on Q values for all state/action pairs to the
# specified file.  The states are specified in the file using the
# indices defined in the stateIndexOutputFile.
qValuesOutputFile none

# customMDPNumStates: This parameter is provided as an example of how
# to pass run-time parameters to a custom MDP you create by modifying
# the CustomMDP class in src/mdps/CustomMDP.cc.  The problem
# in the example implementation of CustomMDP has a variable number of
# states determined by this parameter.  You can override the config
# file value from the command-line, with e.g. '--customMDPNumStates 10'.
customMDPNumStates 5

# storageOutputFile: Specifies where to write a log of storage space
# used throughout the ZMDP run.
# [zmdp benchmark only]
storageOutputFile none

# policyInputFile: Specifies the name of the file to read in the policy
# from.  Note: For some policy types (for instance, 'lspath' and 'lsblind'),
# the policy is generated during initialization of the evaluator, so that
# no policyInputFile is needed.
# [zmdp evaluate only]
policyInputFile out.policy

# policyType: Specifies the type of policy to use during evaluation.
# Options include 'maxPlanes', 'cassandraAlpha', 'lspath', and
# 'lsblind'.  With the 'maxPlanes' and 'cassandraAlpha' policy types,
# you must specify a policy file for zmdp evaluate to read in.  The
# 'lspath' and 'lsblind' policy types are heuristics that work only
# with LifeSurvey problems.
# [zmdp evaluate only]
policyType maxPlanes

# plannerModel: The problem model to give to the planner (or to use when
# interpreting a ZMDP policy).  If the value is '-', the plannerModel is
# set to be the same as the simulatorModel.  When evaluating a ZMDP
# policy, you must specify the same plannerModel that was used when the
# policy was generated in order for it to be executed properly.
plannerModel -

# customModel: Certain types of policies ('lspath' and 'lsblind')
# require additional information about the structure of the planning
# model that is not included in the Cassandra-format file.  This
# field specifies the file where that information is found
# (for example, "ltv1.lifeSurvey").
# [zmdp evaluate only]
customModel none
